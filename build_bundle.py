#!/usr/bin/env python3
"""
Simple JavaScript bundler for MARBEFES BBT Database
Concatenates all JavaScript files in correct dependency order
"""

import os
from pathlib import Path
from datetime import datetime

# Source files in dependency order
JS_FILES = [
    "static/js/utils/debug.js",
    "static/js/data/bbt-regions.js",
    "static/js/data/marbefes-datasets.js",
    "static/js/config.js",
    "static/js/map-init.js",
    "static/js/layer-manager.js",
    "static/js/bbt-tool.js",
    "static/js/ui-handlers.js",
    "static/js/app.js",
]

def build_bundle():
    """Build JavaScript bundle by concatenating source files"""
    print("üì¶ Building JavaScript bundle...")

    # Create dist directory
    dist_dir = Path("static/dist")
    dist_dir.mkdir(parents=True, exist_ok=True)

    bundle_file = dist_dir / "app.bundle.js"

    # Banner
    banner = f"""/**
 * MARBEFES BBT Database - JavaScript Bundle v1.2.4
 * Generated: {datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")}
 *
 * DO NOT EDIT THIS FILE DIRECTLY
 * Edit source files in static/js/ and rebuild with: python build_bundle.py
 *
 * Modules included:
 * - debug.js (Conditional debug logging)
 * - bbt-regions.js (BBT region data)
 * - marbefes-datasets.js (MARBEFES datasets)
 * - config.js (Application configuration)
 * - map-init.js (Map initialization)
 * - layer-manager.js (Layer management)
 * - bbt-tool.js (BBT navigation tool)
 * - ui-handlers.js (UI event handlers)
 * - app.js (Main application orchestrator)
 */

"""

    # Concatenate files
    print(f"  Concatenating {len(JS_FILES)} JavaScript files...")
    content = [banner]

    for js_file in JS_FILES:
        file_path = Path(js_file)
        if file_path.exists():
            print(f"    ‚úì {js_file}")
            content.append(f"\n/* ========================================")
            content.append(f" * Source: {js_file}")
            content.append(f" * ======================================== */\n")
            with open(file_path, 'r', encoding='utf-8') as f:
                content.append(f.read())
            content.append("\n")
        else:
            print(f"    ‚úó WARNING: {js_file} not found")

    # Write bundle
    bundle_content = '\n'.join(content)
    with open(bundle_file, 'w', encoding='utf-8') as f:
        f.write(bundle_content)

    bundle_size = len(bundle_content.encode('utf-8'))
    bundle_size_kb = bundle_size // 1024

    print(f"\n‚úÖ Bundle created: {bundle_file} ({bundle_size_kb}KB)")

    # Minify with terser if available
    if (dist_dir.parent / "node_modules").exists():
        print("\n  Minifying bundle with terser...")
        import subprocess
        try:
            result = subprocess.run([
                "npx", "terser", str(bundle_file),
                "--compress", "drop_console=false,drop_debugger=true",
                "--mangle",
                "--comments", "false",
                "--output", str(dist_dir / "app.bundle.min.js"),
                "--source-map", "filename='app.bundle.min.js.map',url='app.bundle.min.js.map'"
            ], capture_output=True, text=True, check=True)

            min_file = dist_dir / "app.bundle.min.js"
            if min_file.exists():
                min_size = min_file.stat().st_size
                min_size_kb = min_size // 1024
                reduction = 100 - (min_size * 100 // bundle_size)
                print(f"‚úÖ Minified bundle created: {min_file} ({min_size_kb}KB, {reduction}% reduction)")
        except Exception as e:
            print(f"‚ö†Ô∏è  Minification failed: {e}")
    else:
        print("\n‚ö†Ô∏è  Terser not available, skipping minification")
        print("   Install with: npm install")

    print("\nüéâ Bundle build complete!")
    print("\nTo use the bundle, update index.html to load:")
    print("  Development: <script src=\"{{ url_for('static', filename='dist/app.bundle.js') }}\"></script>")
    print("  Production:  <script src=\"{{ url_for('static', filename='dist/app.bundle.min.js') }}\"></script>")

if __name__ == "__main__":
    build_bundle()
