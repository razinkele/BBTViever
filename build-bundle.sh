#!/bin/bash
# Simple JavaScript bundler for MARBEFES BBT Database
# Concatenates all JavaScript files in correct dependency order

set -e

echo "📦 Building JavaScript bundle..."

# Output directory
DIST_DIR="static/dist"
BUNDLE_FILE="$DIST_DIR/app.bundle.js"
BUNDLE_MIN_FILE="$DIST_DIR/app.bundle.min.js"

# Create dist directory
mkdir -p "$DIST_DIR"

# Source files in dependency order
JS_FILES=(
    "static/js/utils/debug.js"
    "static/js/data/bbt-regions.js"
    "static/js/data/marbefes-datasets.js"
    "static/js/config.js"
    "static/js/map-init.js"
    "static/js/layer-manager.js"
    "static/js/bbt-tool.js"
    "static/js/ui-handlers.js"
    "static/js/app.js"
)

# Banner
cat > "$BUNDLE_FILE" << 'EOF'
/**
 * MARBEFES BBT Database - JavaScript Bundle v1.2.4
 * Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
 *
 * DO NOT EDIT THIS FILE DIRECTLY
 * Edit source files in static/js/ and rebuild with: ./build-bundle.sh
 *
 * Modules included:
 * - debug.js (Conditional debug logging)
 * - bbt-regions.js (BBT region data)
 * - marbefes-datasets.js (MARBEFES datasets)
 * - config.js (Application configuration)
 * - map-init.js (Map initialization)
 * - layer-manager.js (Layer management)
 * - bbt-tool.js (BBT navigation tool)
 * - ui-handlers.js (UI event handlers)
 * - app.js (Main application orchestrator)
 */

EOF

# Concatenate all JavaScript files
echo "  Concatenating ${#JS_FILES[@]} JavaScript files..."
for file in "${JS_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "    ✓ $file"
        echo "" >> "$BUNDLE_FILE"
        echo "/* ========================================" >> "$BUNDLE_FILE"
        echo " * Source: $file" >> "$BUNDLE_FILE"
        echo " * ======================================== */" >> "$BUNDLE_FILE"
        echo "" >> "$BUNDLE_FILE"
        cat "$file" >> "$BUNDLE_FILE"
        echo "" >> "$BUNDLE_FILE"
    else
        echo "    ✗ WARNING: $file not found"
    fi
done

# Get file size
BUNDLE_SIZE=$(wc -c < "$BUNDLE_FILE")
BUNDLE_SIZE_KB=$((BUNDLE_SIZE / 1024))

echo ""
echo "✅ Bundle created: $BUNDLE_FILE (${BUNDLE_SIZE_KB}KB)"

# Minify with terser if available
if command -v npx &> /dev/null && [ -d "node_modules" ]; then
    echo ""
    echo "  Minifying bundle with terser..."
    npx terser "$BUNDLE_FILE" \
        --compress drop_console=false,drop_debugger=true \
        --mangle \
        --comments false \
        --output "$BUNDLE_MIN_FILE" \
        --source-map "filename='app.bundle.min.js.map',url='app.bundle.min.js.map'"

    MIN_SIZE=$(wc -c < "$BUNDLE_MIN_FILE")
    MIN_SIZE_KB=$((MIN_SIZE / 1024))
    REDUCTION=$((100 - (MIN_SIZE * 100 / BUNDLE_SIZE)))

    echo "✅ Minified bundle created: $BUNDLE_MIN_FILE (${MIN_SIZE_KB}KB, ${REDUCTION}% reduction)"
else
    echo ""
    echo "⚠️  Terser not available, skipping minification"
    echo "   Install with: npm install"
fi

echo ""
echo "🎉 Bundle build complete!"
echo ""
echo "To use the bundle, update index.html to load:"
echo "  Development: <script src=\"/static/dist/app.bundle.js\"></script>"
echo "  Production:  <script src=\"/static/dist/app.bundle.min.js\"></script>"
